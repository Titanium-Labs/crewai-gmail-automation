categorization_task:
  description: >
    Read the fetched emails from the 'output/fetched_emails.json' file using FileReadTool and categorize each email based on:
    
    **CATEGORY CLASSIFICATION:**
    1. **PERSONAL** - Emails from friends, family, or personal contacts
    2. **NEWSLETTER** - Subscriptions, updates, news digest emails  
    3. **PROMOTION** - Marketing emails, advertisements, sales offers
    4. **RECEIPT** - Purchase confirmations, order receipts, payment confirmations
    5. **IMPORTANT** - Work-related emails, official correspondence, urgent matters
    6. **YOUTUBE** - Any email related to YouTube (comments, notifications, etc.)
    7. **OTHER** - Emails that don't fit the above categories
    
    **PRIORITY ASSIGNMENT (STRICT RULES):**
    - **HIGH**: Work emergencies, time-sensitive personal matters, important deadlines, urgent official correspondence
    - **MEDIUM**: Regular work emails, personal emails from close contacts, important notifications, YouTube notifications
    - **LOW**: Newsletters, promotions, non-urgent notifications, automated emails
    
    **SPECIAL HANDLING:**
    - All **YOUTUBE** emails should be marked as **READ_ONLY** (user will respond directly on YouTube)
    - **RECEIPT** emails should typically be **MEDIUM** priority unless urgent
    - **PROMOTION** emails are typically **LOW** priority unless from important services
    - **NEWSLETTER** emails are **LOW** priority unless marked urgent by sender
    
    **EMAIL AGE CONSIDERATION:**
    Consider the 'age_days' field when setting priority:
    - Recent emails (0-1 days) maintain their calculated priority
    - Older promotional emails (2+ days) should be **LOW** priority
    - Work emails maintain priority regardless of age
    
    Use the 'FileReadTool' to read the emails from 'output/fetched_emails.json'.
    
    Your final answer should be a JSON object with:
    - emails: Array of email objects with email_id, subject, sender, category, priority, age_days, and reasoning
    - total_processed: Total number of emails categorized
    - summary: Brief summary of categorization results
  expected_output: >
    A comprehensive categorization report in JSON format with each email properly classified by category and priority, including reasoning for each classification decision.

organization_task:
  description: >
    Based on the categorization report, organize emails in Gmail by applying appropriate labels, stars, and priority markers.
    
    FIRST: Read the categorization report from 'output/categorization_report.json' using FileReadTool.
    
    **ORGANIZATION RULES:**
    
    **Stars Assignment:**
    - **HIGH** priority: Yellow star (⭐)
    - **MEDIUM** priority: Orange star 
    - **LOW** priority: No star
    - **EMAILS NEEDING RESPONSES**: Always star regardless of priority (these include PERSONAL emails with HIGH or MEDIUM priority that will get draft replies)
    - **IMPORTANT** category emails: Always star regardless of priority
    
    **Labels to Apply:**
    - **PERSONAL**: Apply "Personal" label
    - **NEWSLETTER**: Apply "Newsletter" label  
    - **PROMOTION**: Apply "Promotion" label
    - **RECEIPT**: Apply "Receipt" label
    - **IMPORTANT**: Apply "Important" and "Work" labels
    - **YOUTUBE**: Apply "YouTube" label
    - **OTHER**: Apply "Miscellaneous" label
    
    **Additional Labels:**
    - **HIGH** priority emails: Add "High Priority" label
    - **MEDIUM** priority emails: Add "Medium Priority" label
    - **LOW** priority emails: Add "Low Priority" label
    
    **Special Handling:**
    - **YOUTUBE** emails: Mark as READ_ONLY in the report
    - **RECEIPT** emails: Apply "Archive" label for better organization
    - Emails older than 7 days: Add "Needs Review" label
    
    **CRITICAL: Response Coordination Rules**
    - **PERSONAL** emails with **HIGH** or **MEDIUM** priority: These will get draft replies, so ALWAYS STAR them
    - **IMPORTANT** emails with **HIGH** or **MEDIUM** priority: These need attention, so ALWAYS STAR them
    - Any email in **IMPORTANT** category: ALWAYS STAR regardless of priority
    
    Use the 'OAuth2GmailOrganizeTool' to apply labels and stars to each email based on the categorization.
    
    Your final answer should be a JSON object with:
    - emails: Array of email objects with email_id, subject, labels_applied, star_applied, and organization_status
    - total_organized: Number of emails successfully organized
    - failed_operations: List of any failed organization attempts
    - summary: Brief summary of organization results
  expected_output: >
    A detailed organization report showing which labels and stars were applied to each email, with success/failure status for each operation.

response_task:
  description: >
    Based on the categorization report, generate responses ONLY for emails that require action.
    
    FIRST: Read the user persona from knowledge/user_facts.txt using FileReadTool to understand:
    - User's professional background and role
    - Communication style and tone preferences
    - Personal interests and relationships
    - Work context and industry
    - Family and personal situation
    Use this information to craft personalized, authentic responses that match the user's voice.
    
    IMPORTANT: Process ALL emails from the categorization report. For each email:
    
    Only generate responses for:
    - PERSONAL emails with HIGH or MEDIUM priority
    - DO NOT generate responses for ANY YouTube emails - the user will respond directly on YouTube instead
    
    
    For YouTube comments:
    - Thank them for their comment
    - Answer their question if possible
    
    IMPORTANT: For the recipient field, extract the username from the comment.
    For example, if the comment is from "@username commented on your video",
    use "username@gmail.com" as the recipient.
    
    When crafting responses, reference the user persona to:
    - Match the user's typical communication style (formal/casual)
    - Include relevant personal or professional context
    - Use appropriate tone based on the relationship with the recipient
    - Reference shared interests or past interactions if relevant
    
    MANDATORY: For each email that needs a response, you MUST use the 'OAuth2SaveDraftTool' tool:
    
    STEP 1: Call OAuth2SaveDraftTool with these exact parameters:
    - recipient: The sender's email address (extract from sender field)
    - subject: Add "Re: " to the original subject
    - body: Your personalized response (using user persona information)
    - in_reply_to: Use the email_id if this is a reply
    
    STEP 2: Verify the tool call was successful by checking the return message
    
    STEP 3: Only mark draft_saved as true if OAuth2SaveDraftTool returned success
    
    STEP 4: For emails where you successfully saved a draft, use OAuth2GmailOrganizeTool to add a star:
    - email_id: The email ID
    - star: true
    - This ensures emails with draft replies are easily identifiable
    
    CRITICAL: You must actually call the OAuth2SaveDraftTool for each response. Do not just claim to have saved drafts - actually use the tool.
    
    Your final answer should be a JSON object with:
    - emails: Array of email objects with email_id, subject, recipient, response_summary, response_needed (boolean), and draft_saved (boolean)
    - total_processed: Number of emails processed
    - responses_generated: Number of responses created
    - tool_calls_made: Number of actual OAuth2SaveDraftTool calls made
    - summary: Brief summary of response generation results
  expected_output: >
    A comprehensive response report detailing which emails received draft responses and which were marked as no response needed, with reasoning for each decision.

cleanup_task:
  description: >
    Based on the categorization and organization reports, safely clean up low-priority emails and manage the inbox.
    
    FIRST: Read both reports using FileReadTool:
    - 'output/categorization_report.json'
    - 'output/organization_report.json'
    
    **DELETION RULES (BE VERY CAREFUL):**
    
    **SAFE TO DELETE:**
    - **PROMOTION** emails older than 2 days with **LOW** priority
    - **NEWSLETTER** emails older than 7 days with **LOW** priority
    - Emails from "Shutterfly" (any age, any priority)
    - **OTHER** category emails older than 30 days with **LOW** priority
    
    **NEVER DELETE:**
    - **PERSONAL** emails (any age, any priority)
    - **IMPORTANT** emails (any age, any priority)
    - **RECEIPT** emails (any age, any priority)
    - **YOUTUBE** emails (any age, any priority)
    - **HIGH** or **MEDIUM** priority emails (regardless of category)
    - Emails newer than the specified age thresholds
    
    **SPECIAL CASES:**
    - Shutterfly emails: Always delete regardless of age or priority
    - Promotional emails from known important services: Archive instead of delete
    - Newsletter emails from professional sources: Archive instead of delete
    
    **PROCESS:**
    1. Identify emails that meet deletion criteria
    2. Use 'GmailDeleteTool' to move them to trash
    3. Use 'EmptyTrashTool' to permanently delete trash contents
    4. Generate a detailed report of all actions taken
    
    **SAFETY CHECK:**
    Before deleting any email, double-check:
    - It matches the deletion criteria exactly
    - It's not marked as HIGH or MEDIUM priority
    - It's not in a protected category
    
    Your final answer should be a JSON object with:
    - emails_deleted: Array of deleted email objects with email_id, subject, reason_for_deletion
    - emails_preserved: Array of emails that were considered but preserved with reasoning
    - total_deleted: Number of emails deleted
    - total_preserved: Number of emails preserved
    - trash_emptied: Boolean indicating if trash was emptied
    - summary: Brief summary of cleanup actions and space freed
  expected_output: >
    A detailed cleanup report showing exactly which emails were deleted and why, which were preserved and why, and the overall impact of the cleanup operation.
