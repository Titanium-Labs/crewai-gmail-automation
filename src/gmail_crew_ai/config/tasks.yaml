categorization_task:
  description: >
    First, read the fetched emails from the file at 'output/fetched_emails.json' using the `FileReadTool`.
    
    IMPORTANT: Process ALL emails in the file, not just one. For each email in the list, analyze the content and categorize as follows:

    1. Category (choose one):
       - NEWSLETTERS
       - PROMOTIONS
       - PERSONAL
       - GITHUB
       - YOUTUBE
       - RECEIPTS_INVOICES
       - OTHER

    2. Priority (choose one):
      IMPORTANT - BE VERY STRICT WITH PRIORITY LEVELS:
      - HIGH: ONLY for urgent matters requiring immediate attention or response
      - MEDIUM: ONLY for important but not urgent communications from real people
         - DO NOT mark promotional content, newsletters, or automated notifications as MEDIUM
         - DO NOT mark Shutterfly or other promotional emails as MEDIUM - they should be LOW
         - Only actual communication from real people can be MEDIUM
      - LOW

    3. Required Action (choose one):
       - REPLY
       - READ_ONLY
       - TASK
       - IGNORE

    IMPORTANT YOUTUBE EMAIL RULES:
    - ANY email from youtube.com domains MUST be categorized as YOUTUBE
    - ANY email containing "YouTube" in the subject or sender MUST be categorized as YOUTUBE
    - YouTube emails about comments should be HIGH priority but require READ_ONLY action
      (the user will reply directly on YouTube, not via email)
    
    IMPORTANT FORMAT INSTRUCTIONS:
    Your final answer must be a JSON object with these exact fields:
    
    - emails: Array of email objects, each containing email_id, subject, sender, category, priority, required_action, date, and age_days
    - total_processed: Number of emails processed
    - summary: Brief summary of categorization results
    
    Process ALL emails in the fetched file. Do not include any explanations, thoughts, or additional text outside the JSON object.
    Do not use markdown formatting or code blocks.
    Just return the raw JSON object.
  expected_output: >
    A JSON object containing a list of all categorized emails with email_id, subject, sender, category, priority, required_action, date, and age_days fields for each email, plus total_processed count and summary.
  agent: categorizer
  output_file: output/categorization_report.json

organization_task:
  description: >
    First, read the categorization report from 'output/categorization_report.json' using the `FileReadTool`.
    
    IMPORTANT: Process ALL emails from the categorization report. For each email in the list, organize it using Gmail's priority features with the 'OAuth2GmailOrganizeTool' tool.

    Use the email content, email domain, and categorization report to determine the correct labels.
    
    Simplified Label Rules:
    
    1. For YOUTUBE emails:
       - Add "YOUTUBE" label
       - Star the email
       - If HIGH priority, also add "URGENT" label
    
    2. For NEWSLETTERS emails:
       - Add "NEWSLETTERS" label
       - No newsletter is HIGH or MEDIUM priority
       - No newsletter requires action
    
    3. For other emails:
       - Add a label matching the category (e.g., "PERSONAL", "GITHUB")
       - If HIGH priority, add "URGENT" label and star the email
       - If MEDIUM priority, add "ACTION_NEEDED" label
    
    Your final answer should be a JSON object with:
    - emails: Array of email objects with email_id, subject, applied_labels (array), starred (boolean), and result
    - total_processed: Number of emails processed
    - summary: Brief summary of organization results
  expected_output: >
    A JSON object containing a detailed report of how ALL emails were organized, including:
    - A list of all processed emails with their organization details
    - The email ID and subject for each email
    - The labels that were applied to each email
    - Whether each email was starred
    - The result of each organization attempt
    - Total count of processed emails
    - Summary of results

    The report should include special handling for YOUTUBE and NEWSLETTERS emails to ensure they receive
    the appropriate labels and priority indicators.
  agent: organizer
  context: [categorization_task]
  output_file: output/organization_report.json

response_task:
  description: >
    Based on the categorization report, generate responses ONLY for emails that require action.
    
    FIRST: Read the user persona from knowledge/user_facts.txt using FileReadTool to understand:
    - User's professional background and role
    - Communication style and tone preferences
    - Personal interests and relationships
    - Work context and industry
    - Family and personal situation
    Use this information to craft personalized, authentic responses that match the user's voice.
    
    IMPORTANT: Process ALL emails from the categorization report. For each email:
    
    Only generate responses for:
    - PERSONAL emails with HIGH or MEDIUM priority
    - DO NOT generate responses for ANY YouTube emails - the user will respond directly on YouTube instead
    
    
    For YouTube comments:
    - Thank them for their comment
    - Answer their question if possible
    
    IMPORTANT: For the recipient field, extract the username from the comment.
    For example, if the comment is from "@username commented on your video",
    use "username@gmail.com" as the recipient.
    
    When crafting responses, reference the user persona to:
    - Match the user's typical communication style (formal/casual)
    - Include relevant personal or professional context
    - Use appropriate tone based on the relationship with the recipient
    - Reference shared interests or past interactions if relevant
    
    Use the 'OAuth2SaveDraftTool' tool with:
    - subject: Add "Re: " to the original subject
    - body: Your response (personalized using user persona information)
    - recipient: The extracted username + "@gmail.com" or use "user@example.com" if you can't extract it
    
    Your final answer should be a JSON object with:
    - emails: Array of email objects with email_id, subject, recipient, response_summary, response_needed (boolean), and draft_saved (boolean)
    - total_processed: Number of emails processed
    - responses_generated: Number of responses created
    - summary: Brief summary of response generation results
  expected_output: >
    A JSON object containing information about ALL processed emails and which ones received responses:
    - A list of all emails with response details
    - Whether each email needed a response
    - Whether a draft was saved for each email that needed one
    - Total count of processed emails
    - Count of responses generated
    - Summary of results
    
    Each draft should follow the specified structure and formatting guidelines.
  agent: response_generator
  context: [categorization_task, organization_task]
  output_file: output/response_report.json

notification_task:
  description: >
    Based on the categorization report, send Slack notifications for HIGH priority emails using the 'SlackNotificationTool'.
    
    IMPORTANT: Process ALL emails from the categorization report. For each HIGH priority email:
    1. Create a brief summary of the email content
    2. Identify any action needed
    3. Create an attention-grabbing headline
    4. Add an emoji-filled intro
    
    Use the 'SlackNotificationTool' with:
    - subject: The email subject
    - sender: The email sender
    - category: The email category (YOUTUBE, PERSONAL, etc.)
    - priority: HIGH
    - summary: Your brief summary
    - action_needed: What action is needed
    - headline: Your custom headline
    - intro: Your custom intro with emojis
    
    Your final answer should be a JSON object with:
    - notifications: Array of notification objects for HIGH priority emails with email_id, subject, sender, category, priority, summary, action_needed, headline, intro, and notification_sent (boolean)
    - total_processed: Number of emails processed
    - notifications_sent: Number of notifications sent
    - summary: Brief summary of notification results
  expected_output: >
    A JSON object containing information about ALL processed emails and which HIGH priority ones received Slack notifications:
    - A list of all HIGH priority emails with notification details
    - Whether notifications were successfully sent
    - Total count of processed emails
    - Count of notifications sent
    - Summary of results including subjects, priorities, and creative elements used
  agent: notifier
  context: [categorization_task]
  output_file: output/notification_report.json

cleanup_task:
  description: >
    Based on the categorization report, identify LOW priority emails that are safe to delete.
    
    IMPORTANT: Process ALL emails from the categorization report.
    
    EMAILS TO ARCHIVE INSTEAD OF DELETE:
    - Receipts and Invoices (archive for tax purposes)
    - Confirmation emails for purchases
    - Travel-related emails with booking information
    - Anything that might be needed for reference later
    
    For these emails, use the 'GmailArchiveTool' instead of deleting them.
    
    NEVER delete:
    - ANY email marked as HIGH or MEDIUM priority
    - ANY email from a personal contact
    - ANY email related to YouTube
    - ANY email less than 5 days old
    
    ALWAYS delete:
    - ANY email with "Shutterfly" in the sender or subject, regardless of categorization
    - ANY email categorized as PROMOTIONS and older than 2 days
    - ANY email categorized as NEWSLETTERS and older than 7 days, unless HIGH priority
    
    The emails already have their age calculated in the "age_days" field.
    An email is less than 5 days old if age_days < 5.
    
    For each email:
    1. Check if it meets the deletion criteria (LOW priority AND not from criteria above)
    2. For emails you decide to delete, document:
       - The email subject and sender
       - The reason for deletion
       - Use the 'GmailDeleteTool' with the email_id and reason

    AFTER processing all emails for deletion:
    3. IMPORTANT: Use the 'empty_gmail_trash' tool to permanently empty the trash folder
       and free up storage space in the Gmail account.

    WORKFLOW:
    1. First, analyze each email one at a time
    2. For emails that should be deleted, use delete_email tool with ONLY the required fields
    3. After processing all emails, use empty_gmail_trash tool
    4. Then compile your final report

    Your final answer should be a JSON object with:
    - processed_emails: Array of email objects with email_id, subject, sender, age_days (number), deleted (boolean), and reason
    - total_processed: Number of emails processed
    - deleted_count: Number of emails deleted
    - preserved_count: Number of emails preserved
    - trash_emptied: Boolean indicating if trash was emptied
    - trash_messages_removed: Number of messages removed from trash
    - summary: Brief summary of cleanup results

    IMPORTANT: When using the 'delete_email' tool, ONLY provide the email_id and reason 
    as a simple JSON object. For example:
    
      "email_id": "123", 
      "reason": "Low priority promotional email"
    
  expected_output: >
    A JSON object containing a comprehensive cleanup report with:
    - A list of all processed emails with their deletion/preservation details
    - Total counts of processed, deleted, and preserved emails
    - Information about whether the trash was emptied successfully
    - Number of messages permanently removed from trash
    - Summary of cleanup results
    
    The report should include full details for tracking purposes and be in JSON format for easy parsing.
  agent: cleaner
  context: [categorization_task, organization_task]
  output_file: output/cleanup_report.json
